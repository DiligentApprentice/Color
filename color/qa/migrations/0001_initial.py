# Generated by Django 2.1.7 on 2019-07-31 12:53

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import markdownx.models
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', markdownx.models.MarkdownxField(verbose_name='问题回答')),
                ('is_accepted', models.BooleanField(default=False, verbose_name='被采纳')),
                ('create_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name_plural': '回复',
                'ordering': ('-create_at',),
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, unique=True, verbose_name='问题标题')),
                ('content', markdownx.models.MarkdownxField(verbose_name='问题详情')),
                ('slug', models.SlugField(max_length=128, verbose_name='获取详情页面URL')),
                ('q_type', models.IntegerField(choices=[(1, 'Open'), (2, 'Draft'), (3, 'Closed')], default=1, verbose_name='问题状态')),
                ('is_solved', models.BooleanField(default=False, verbose_name='问题是否已经解决')),
                ('create_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
                ('tags', taggit.managers.TaggableManager(help_text='多个标签可以用逗号隔开', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='questions', to=settings.AUTH_USER_MODEL, verbose_name='提问者')),
            ],
            options={
                'verbose_name_plural': '提问',
                'ordering': ('-create_at',),
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.BooleanField(default=True, verbose_name='投票')),
                ('object_id', models.IntegerField(verbose_name='关联对象id')),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='关联表')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='voters', to=settings.AUTH_USER_MODEL, verbose_name='投票用户')),
            ],
            options={
                'verbose_name_plural': '投票',
            },
        ),
        migrations.AddField(
            model_name='answer',
            name='questions',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='qa.Question', verbose_name='回答'),
        ),
        migrations.AddField(
            model_name='answer',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='answers', to=settings.AUTH_USER_MODEL, verbose_name='回答者'),
        ),
        migrations.AlterUniqueTogether(
            name='vote',
            unique_together={('user', 'content_type', 'object_id')},
        ),
        migrations.AlterIndexTogether(
            name='vote',
            index_together={('content_type', 'object_id')},
        ),
    ]
